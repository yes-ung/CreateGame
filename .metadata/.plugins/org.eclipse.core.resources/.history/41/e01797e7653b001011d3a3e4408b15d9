import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class GamePanel extends JPanel implements ActionListener, MouseListener, MouseMotionListener {
	Timer timer;
	
	//마우스 드래그
	int dragStartX, dragStartY;
	int dragEndX, dragEndY;
	int currentMouseX, currentMouseY;
	boolean dragging = false;
	
	
	
	
	
	
    //유닛 및 건물 선언
    List<Unit> userUnits = new LinkedList<>();
    List<Unit> enemys = new LinkedList<>();
    List<Unit> test = new LinkedList<>();
    List<Unit> allUnits = new LinkedList<>(); //소환된 모든 진영유닛 한번에 선택
    List<Building> buildings = new ArrayList<>(); //생산건물 
    
//  배경화면 삽입용@@@@@@@@@@@@@@@@@@@    
    private BufferedImage backgroundImage;
   
  
    public GamePanel() {
    	// 배경이미지 삽입용 링크걸기@@@@@@@@@@@@@@@@
        try {
            backgroundImage = ImageIO.read(getClass().getResource("/background.png")); // 이미지 경로는 실제 파일 위치에 맞게 변경
        } catch (IOException e) {
            e.printStackTrace();
        }  	
        setPreferredSize(new Dimension(800, 600));
//        setBackground(Color.blue); //(배경이미지 없을때 배경 단색으로 쓸 때)
        addMouseListener(this);
       
       buildings.add(new Building(100, 100, "1"));
       userUnits.add(new Unit(100, 150,"1"));
       enemys.add(new UnitEnemy(600, 400, "2"));
       enemys.add(new UnitEnemy(600, 400, "2"));
       enemys.add(new UnitEnemy(600, 400, "2"));
       test.add(new UnitEnemy(300,400,"3"));
       test.add(new UnitEnemy(300,400,"3"));
       test.add(new UnitEnemy(300,400,"3"));
       allUnits.addAll(userUnits);
       allUnits.addAll(enemys);
       allUnits.addAll(test);

       
      
       
       
      
       
       
       timer = new Timer(16, this); // 약 60 FPS
       timer.start();
          
   
    }
    //화면 그리는 메소드
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // 배경 이미지 그리기
        if (backgroundImage != null) {
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
       //유닛 그리기      
        for (Unit u : allUnits) {
            u.draw(g);
        }
//        for (Unit u : userUnits) {
//            u.draw(g);
//        }
        
        
        //건물 그리기
        for (Building u : buildings) {
            u.draw(g);
        }
        //마우스 드래그 그리기
        if (dragging) {
            int left = Math.min(dragStartX, currentMouseX);
            int top = Math.min(dragStartY, currentMouseY);
            int width = Math.abs(currentMouseX - dragStartX);
            int height = Math.abs(currentMouseY - dragStartY);

            g.setColor(new Color(0, 255, 255, 100));
            g.fillRect(left, top, width, height);
            g.setColor(Color.CYAN);
            g.drawRect(left, top, width, height);
        }
    }

    
    
    //케릭터 움직임 실시간 업데이트 메소드
    @Override
    public void actionPerformed(ActionEvent e) {

        for (Unit t : allUnits) {
            t.update( allUnits);
         }
  
        
        for (Building b : buildings) {
            Unit produced = b.update(userUnits);
            
            if (produced != null) {
                System.out.println("유닛 생산됨!");
                allUnits.add(produced);
            }
        }
        
//        유닛충돌 해소@@@@@@@
        for (int i = 0; i < allUnits.size(); i++) {
            for (int j = i + 1; j < allUnits.size(); j++) {
                Unit u1 = allUnits.get(i);
                Unit u2 = allUnits.get(j);

                if (u1.isColliding(u2)) {
                    u1.resolveCollision(u2);
                }
            }
         }
//        유닛충돌 해소 @@@@@@        
        repaint();
    }
//마우스 동작 메소드
    @Override
    public void mouseClicked(MouseEvent e) {
//        for (Unit u : userUnits) {
//            u.setTarget(e.getX(), e.getY());
//        }
        handleMouseClick(e.getX(), e.getY());
        handleRightClick(e.getX(), e.getY(),allUnits);
        
    }
    @Override
    public void mouseDragged(MouseEvent e) {
        if (dragging) {
            currentMouseX = e.getX();
            currentMouseY = e.getY();
            System.out.println(e.getX()+"+"+e.getY());
        }
    }
    @Override
    public void mousePressed(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
            dragStartX = e.getX();
            dragStartY = e.getY();
            dragging = true;
        }
    }
    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1 && dragging) {
            dragging = false;
            dragEndX = e.getX();
            dragEndY = e.getY();
            selectUnitsInBox(dragStartX, dragStartY, dragEndX, dragEndY, allUnits);
        }
    }
   
    public void selectUnitsInBox(int x1, int y1, int x2, int y2, List<Unit> units) {
        deselectAll(units);

        int left = Math.min(x1, x2);
        int right = Math.max(x1, x2);
        int top = Math.min(y1, y2);
        int bottom = Math.max(y1, y2);

        for (Unit u : units) {
            if (u.team == "1" && u.x >= left && u.x <= right && u.y >= top && u.y <= bottom) {
                u.isSelected = true;
            }
        }
    }
    //유닛 개별 마우스 선택
    public void handleLeftClick(int mx, int my, List<Unit> allUnits) {
        for (Unit u : allUnits) {
            if (u.team == "1" && isPointInsideUnit(mx, my, u)) {
                deselectAll(allUnits);
                u.isSelected = true;
                return;
            }
        }
        deselectAll(allUnits);
    }
    public boolean isPointInsideUnit(int px, int py, Unit u) {
        int radius = 15;
        return Math.abs(u.x - px) < radius && Math.abs(u.y - py) < radius;
    }
    public void deselectAll(List<Unit> allUnits) {
        for (Unit u : allUnits) {
            u.isSelected = false;
        }
    }
    public void handleRightClick(int mx, int my, List<Unit> allUnits) {
        // 적 유닛인지 확인
        for (Unit u : allUnits) {
            if (u.team != "1" && isPointInsideUnit(mx, my, u)) {
                // 공격 명령
                for (Unit myUnit : allUnits) {
                    if (myUnit.team == "1" && myUnit.isSelected) {
                        myUnit.targetEnemy = u;
                    }
                }
                return;
            }
        }

        // 이동 명령
        for (Unit myUnit : allUnits) {
            if (myUnit.team == "1" && myUnit.isSelected) {
                myUnit.setTarget(mx, my);
                myUnit.targetEnemy = null;
            }
        }
    }
    //건물 클릭 유닛 생성
    public void handleMouseClick(int mx, int my) {
        for (Building b : buildings) {
            if (Math.abs(b.x - mx) < 40 && Math.abs(b.y - my) < 40) {
                b.startBuilding();
                
                break;
            }
        }
    }


    // 사용하지 않는 MouseListener 메소드
    public void mouseMoved(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}
}
